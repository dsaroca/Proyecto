# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OEVDWTxE74IS4S_mNEOXNHNXzDZQCoq9

Ordenar datos
"""

import pandas as pd

# Crear un DataFrame con los datos proporcionados
data = {
    'Participante': ['Fernando', 'Maite', 'Lucas', 'Jennifer', 'Fran', 'Hans', 'Jorge', 'Monica', 'Ariel', 'Alessia', 'Ruben', 'Scarleth', 'Trinidad', 'Benja', 'Cony', 'Viviana', 'Francisco', 'Estefy', 'Junior Playboy', 'Eva Gomez', 'Pamela Diaz', 'Jhonatan Mujica', 'La Guaren', 'El futuro fuera de orbita', 'Azzart Meveth', 'camilisima', 'Miguelito', 'Shirley Arica', 'Camila Arismedi', 'Fabio Agostini', 'Simon de la costa', 'Luis Mateucci'],
    'Reality': ['GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB'],
    'Likes': [1979, 2247, 2318, 2579, 3465, 2881, 2618, 3393, 2784, 3656, 3176, 3163, 3966, 2398, 3082, 3594, 3175, 4352, 15400, 8500, 622000, 210, 290, 114000, 71400, 19400, 0, 53400, 22100, 26500, 0, 7311]

    }

df = pd.DataFrame(data)

# Ordenar el DataFrame por la columna "Likes" en orden descendente
df_sorted = df.sort_values(by='Likes', ascending=False)

# Mostrar el DataFrame ordenado
print(df_sorted)

"""Agregaré más datos, porque antes me daba error, en este codigo pero revisa si tienen las listas la misma cantidad de elementos."""

import pandas as pd

# Datos originales
data = {
    'Participante': ['Fernando', 'Maite', 'Lucas', 'Jennifer', 'Fran', 'Hans', 'Jorge', 'Monica', 'Ariel', 'Alessia', 'Ruben', 'Scarleth', 'Trinidad', 'Benja', 'Cony', 'Viviana', 'Francisco', 'Estefy', 'Junior Playboy', 'Eva Gomez', 'Pamela Diaz', 'Jhonatan Mujica', 'La Guaren', 'El futuro fuera de orbita', 'Azzart Meveth', 'camilisima', 'Miguelito', 'Shirley Arica', 'Camila Arismedi', 'Fabio Agostini', 'Simon de la costa', 'Luis Mateucci'],
    'Reality': ['GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB'],
    'Comentarios': [1, 1, 4, 2, 3, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 12, 1, 290, 55, 252, 142, 44, 19, 0, 59, 22, 19, 0, 13],
    'Guardado': [0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 164, 104, 69, 28, 0, 55, 17, 20, 0, 9],
    'Repost': [6, 3, 2, 8, 7, 18, 4, 18, 12, 12, 9, 11, 2, 2, 4, 16, 1, 3, 113, 58, 7403, 731, 460, 265, 276, 115, 0, 369, 121, 194, 0, 95],
     'Likes': [1979, 2247, 2318, 2579, 3465, 2881, 2618, 3393, 2784, 3656, 3176, 3163, 3966, 2398, 3082, 3594, 3175, 4352, 15400, 8500, 622000, 210, 290, 114000, 71400, 19400, 0, 53400, 22100, 26500, 0, 7311]
}

# Verificar longitudes de las listas
longitudes = set(len(lst) for lst in data.values())
if len(longitudes) > 1:
    print("Error: Las siguientes listas no tienen la misma longitud:")
    for key, value in data.items():
        print(f"{key}: {len(value)}")

# Crear DataFrame
df = pd.DataFrame(data)

# Ordenar el DataFrame por la columna "Likes" en orden descendente
df_sorted = df.sort_values(by='Likes', ascending=False)

# Mostrar el DataFrame ordenado
print(df_sorted)

"""Guardar y Descargar"""

import pandas as pd

# Datos originales
data = {
    'Participante': ['Fernando', 'Maite', 'Lucas', 'Jennifer', 'Fran', 'Hans', 'Jorge', 'Monica', 'Ariel', 'Alessia', 'Ruben', 'Scarleth', 'Trinidad', 'Benja', 'Cony', 'Viviana', 'Francisco', 'Estefy', 'Junior Playboy', 'Eva Gomez', 'Pamela Diaz', 'Jhonatan Mujica', 'La Guaren', 'El futuro fuera de orbita', 'Azzart Meveth', 'camilisima', 'Miguelito', 'Shirley Arica', 'Camila Arismedi', 'Fabio Agostini', 'Simon de la costa', 'Luis Mateucci'],
    'Reality': ['GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB'],
    'Comentarios': [1, 1, 4, 2, 3, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 12, 1, 290, 55, 252, 142, 44, 19, 0, 59, 22, 19, 0, 13],
    'Guardado': [0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 164, 104, 69, 28, 0, 55, 17, 20, 0, 9],
    'Repost': [6, 3, 2, 8, 7, 18, 4, 18, 12, 12, 9, 11, 2, 2, 4, 16, 1, 3, 113, 58, 7403, 731, 460, 265, 276, 115, 0, 369, 121, 194, 0, 95],
     'Likes': [1979, 2247, 2318, 2579, 3465, 2881, 2618, 3393, 2784, 3656, 3176, 3163, 3966, 2398, 3082, 3594, 3175, 4352, 15400, 8500, 622000, 210, 290, 114000, 71400, 19400, 0, 53400, 22100, 26500, 0, 7311]
}

# Verificar longitudes de las listas
longitudes = set(len(lst) for lst in data.values())
if len(longitudes) > 1:
    print("Error: Las siguientes listas no tienen la misma longitud:")
    for key, value in data.items():
        print(f"{key}: {len(value)}")

# Crear DataFrame
df = pd.DataFrame(data)

# Ordenar el DataFrame por la columna "Likes" en orden descendente
df_sorted = df.sort_values(by='Likes', ascending=False)

# Mostrar el DataFrame ordenado
print(df_sorted)


# Guardar el DataFrame como CSV
df.to_csv('archivo.csv', index=False)

# Descargar el archivo CSV
files.download('archivo.csv')

"""haré un grafico"""

import pandas as pd
import plotly.express as px

# Datos originales
data = {
    'Participante': ['Fernando', 'Maite', 'Lucas', 'Jennifer', 'Fran', 'Hans', 'Jorge', 'Monica', 'Ariel', 'Alessia', 'Ruben', 'Scarleth', 'Trinidad', 'Benja', 'Cony', 'Viviana', 'Francisco', 'Estefy', 'Junior Playboy', 'Eva Gomez', 'Pamela Diaz', 'Jhonatan Mujica', 'La Guaren', 'El futuro fuera de orbita', 'Azzart Meveth', 'camilisima', 'Miguelito', 'Shirley Arica', 'Camila Arismedi', 'Fabio Agostini', 'Simon de la costa', 'Luis Mateucci'],
    'Reality': ['GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB'],
    'Comentarios': [1, 1, 4, 2, 3, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 12, 1, 290, 55, 252, 142, 44, 19, 0, 59, 22, 19, 0, 13],
    'Guardado': [0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 164, 104, 69, 28, 0, 55, 17, 20, 0, 9],
    'Repost': [6, 3, 2, 8, 7, 18, 4, 18, 12, 12, 9, 11, 2, 2, 4, 16, 1, 3, 113, 58, 7403, 731, 460, 265, 276, 115, 0, 369, 121, 194, 0, 95],
    'Likes': [1979, 2247, 2318, 2579, 3465, 2881, 2618, 3393, 2784, 3656, 3176, 3163, 3966, 2398, 3082, 3594, 3175, 4352, 15400, 8500, 622000, 210, 290, 114000, 71400, 19400, 0, 53400, 22100, 26500, 0, 7311]
}

# Crear DataFrame
df = pd.DataFrame(data)

# Ordenar el DataFrame por la columna "Likes" en orden descendente
df_sorted = df.sort_values(by='Likes', ascending=False)

# Crear el gráfico de barras con Plotly Express y especificar la paleta de colores
fig = px.bar(df_sorted, x='Participante', y='Likes', title='Likes por Participante',
             color='Reality', color_discrete_map={'GH': 'fuchsia', 'TB': 'lightgreen'})

# Personalizar el diseño del gráfico después de crear la figura
fig.update_layout(
    title='Participante más populares en Twitter según likes',
    title_font=dict(size=50, color='Pink', family='Times New Roman'),
    title_x=0.5,  # Centro horizontalmente el título
    xaxis_title='Participantes',
    yaxis_title='Likes',
    barmode='group'  # Agrupar las barras por tipo de formato
)

# Mostrar el gráfico
fig.show()

from google.colab import files

# Guardar el gráfico como HTML en Google Colab
html_file_path = '/content/grafico_likes_twitter.html'
fig.write_html(html_file_path)

# Descargar el archivo HTML
files.download(html_file_path)

"""Probar otro gráfico"""

import pandas as pd
import plotly.express as px

# Datos originales
data = {
    'Participante': ['Fernando', 'Maite', 'Lucas', 'Jennifer', 'Fran', 'Hans', 'Jorge', 'Monica', 'Ariel', 'Alessia', 'Ruben', 'Scarleth', 'Trinidad', 'Benja', 'Cony', 'Viviana', 'Francisco', 'Estefy', 'Junior Playboy', 'Eva Gomez', 'Pamela Diaz', 'Jhonatan Mujica', 'La Guaren', 'El futuro fuera de orbita', 'Azzart Meveth', 'camilisima', 'Miguelito', 'Shirley Arica', 'Camila Arismedi', 'Fabio Agostini', 'Simon de la costa', 'Luis Mateucci'],
    'Reality': ['GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','GH','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB','TB'],
    'Comentarios': [1, 1, 4, 2, 3, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 12, 1, 290, 55, 252, 142, 44, 19, 0, 59, 22, 19, 0, 13],
    'Guardado': [0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 164, 104, 69, 28, 0, 55, 17, 20, 0, 9],
    'Repost': [6, 3, 2, 8, 7, 18, 4, 18, 12, 12, 9, 11, 2, 2, 4, 16, 1, 3, 113, 58, 7403, 731, 460, 265, 276, 115, 0, 369, 121, 194, 0, 95],
    'Likes': [1979, 2247, 2318, 2579, 3465, 2881, 2618, 3393, 2784, 3656, 3176, 3163, 3966, 2398, 3082, 3594, 3175, 4352, 15400, 8500, 622000, 210, 290, 114000, 71400, 19400, 0, 53400, 22100, 26500, 0, 7311]
}



# Crear el gráfico para la suma total de likes
fig_likes = px.bar(sum_likes, x='Reality', y='Likes', color='Reality',
                   color_discrete_map={'GH': 'fuchsia', 'TB': 'lightgreen'},
                   labels={'Likes': 'Total de Likes'},
                   title='Total de Likes por Reality')

# Crear el gráfico para la suma total de comentarios
fig_comentarios = px.bar(sum_comentarios, x='Reality', y='Comentarios', color='Reality',
                         color_discrete_map={'GH': 'fuchsia', 'TB': 'lightgreen'},
                         labels={'Comentarios': 'Total de Comentarios'},
                         title='Total de Comentarios por Reality')

# Crear el gráfico para la suma total de repost
fig_repost = px.bar(sum_repost, x='Reality', y='Repost', color='Reality',
                    color_discrete_map={'GH': 'fuchsia', 'TB': 'lightgreen'},
                    labels={'Repost': 'Total de Repost'},
                    title='Total de Repost por Reality')

# Crear el gráfico para la suma total de guardados
fig_guardados = px.bar(sum_guardados, x='Reality', y='Guardado', color='Reality',
                       color_discrete_map={'GH': 'fuchsia', 'TB': 'lightgreen'},
                       labels={'Guardado': 'Total de Guardados'},
                       title='Total de Guardados por Reality')

# Personalizar el diseño del gráfico después de crear la figura
fig.update_layout(
    title='Comparación de interacciones en Twitter',
    title_font=dict(size=50, color='Pink', family='Times New Roman'),
    title_x=0.5,  # Centro horizontalmente el título
    xaxis_title='.',
    yaxis_title='Likes',
    barmode='group'  # Agrupar las barras por tipo de formato
)


# Añadir los gráficos al diseño del subgráfico
fig.add_trace(fig_likes['data'][0], row=1, col=1)
fig.add_trace(fig_likes['data'][1], row=1, col=1)
fig.add_trace(fig_comentarios['data'][0], row=1, col=2)
fig.add_trace(fig_comentarios['data'][1], row=1, col=2)
fig.add_trace(fig_repost['data'][0], row=2, col=1)
fig.add_trace(fig_repost['data'][1], row=2, col=1)
fig.add_trace(fig_guardados['data'][0], row=2, col=2)
fig.add_trace(fig_guardados['data'][1], row=2, col=2)


# Actualizar el diseño del subgráfico
fig.update_layout(showlegend=False)

# Mostrar el gráfico final
fig.show()

from google.colab import files

# Guardar el gráfico como HTML en Google Colab
html_file_path = '/content/grafico_likes_twitter.html'
fig.write_html(html_file_path)

# Descargar el archivo HTML
files.download(html_file_path)